#FIREに必要な資産と年齢を算出します。以下のPythonコードに必要事項(年齢、資産、月額積立額)を入力すること。
#リスク資産の利回り: 6%, 税率: 20% (line = 26, 29)
#3.5%ルールをFIRE条件として採用。(line = 28)
#入力項目は「******」と記載されています。

import matplotlib.pyplot as plt
import numpy as np

# 初期条件 ★要変更
start_age_years = ******# 現在の年齢
start_age_months = ******# 現在の年齢(月数)を入力。デフォルトは1月にしています。
initial_investment = ******# 現在の投資信託
initial_cash = ******# 現在の現金

#　収入と支出　★要変更
monthly_income = ******#現在の手取り収入
monthly_expense = ******#現在の支出(家賃またはローンは含まない)
rent_free_months = ******#社宅などで家賃が掛からない現在からの期間(単位:月数)。3年後まで家賃かからないのであれば"12*3"と入力。社宅ない人は"rent_free_months =　0"とする。
rent_after = ******#FIRE前の家賃またはローン支払い。なしなら0とする。

#　月額積立額 ★要変更
monthly_contribution_before = ******#月額積立額
monthly_contribution_after = ******#月額積立額(途中から積立額を変更する場合に使用する。しない場合は上記コードと同じ数値を入力)

#　リスク資産パラメーター
annual_return = 0.06#投資信託の年利回り。S&P500を参考に6%をデフォルト設定。
monthly_return = (1 + annual_return) ** (1 / 12) - 1#投資信託の月次利回り。
safe_multiplier = 1 / 0.035# 4%ルールよりも保守的な3.5%ルールを採用
tax = 0.2# 20%設定

# リタイア後の支出 ★要変更
house_loan = ******#FIRE後の家賃またはローン支払い
fire_expense = monthly_expense + house_loan# FIRE後の支出

# グラフ用期間：開始歳〜終了歳 ★要変更
plot_end_age = ******
plot_months = (plot_end_age - start_age_years) * 12 - start_age_months

# 初期資産
investment = initial_investment
cash = initial_cash

# 記録用リスト
ages = []
total_assets = []  # in JPY

for month in range(plot_months + 1):
    current_age_months = start_age_years * 12 + start_age_months + month
    current_age_decimal = current_age_months / 12

    # 支出
    rent = 0 if month < rent_free_months else rent_after
    total_expense = monthly_expense + rent
    cash -= total_expense

    # 収入
    cash += monthly_income

    # 積立
    contribution = monthly_contribution_before if month < rent_free_months else monthly_contribution_after
    actual_contribution = min(cash, contribution)
    cash -= actual_contribution
    investment += actual_contribution

    # 利回り
    investment *= (1 + monthly_return)

    # 総資産記録（JPY）
    total_assets.append(investment + cash)
    ages.append(current_age_decimal)

# リタイア判定資産額 (3.5%ルール且つ税率20%を考慮)
annual_fire_expense = fire_expense * 12
retirement_threshold = annual_fire_expense * safe_multiplier / (1-tax)

# FIRE可能になる最初の年齢
fire_age = None
for age, assets in zip(ages, total_assets):
    if assets >= retirement_threshold:
        fire_age = age
        break

# 結果表示
print("リタイア（FIRE）に必要な資産（円）:", f"{retirement_threshold:,.0f}")
if fire_age is not None:
    years = int(fire_age)
    months = int(round((fire_age - years) * 12))
    print(f"FIRE可能になる年齢：{years}歳{months}か月（小数表記: {fire_age:.2f}歳）")
else:
    print(f"{plot_end_age:,.0f}", "歳までにはFIRE水準に達しない。")

final_assets = total_assets[-1]
print(f"{plot_end_age:,.0f}", "歳時点の総資産（円）:", f"{final_assets:,.0f}")

# プロット
plt.figure(figsize=(10, 6))
plt.plot(ages, np.array(total_assets) / 10000, label="Total Assets (10^4 yen)")
plt.axhline(retirement_threshold / 10000, color="red", linestyle="--", label="FIRE Threshold (10^4 yen)")
plt.xlabel("Age (years)")
plt.ylabel("Total Assets (10,000 JPY)")
plt.title("Asset Growth Over Time")
plt.grid(True)
plt.legend()
plt.xlim(start_age_years, plot_end_age)
plt.tight_layout()
plt.show()
